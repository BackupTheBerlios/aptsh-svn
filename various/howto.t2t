AptSh Howto
by Marcin Wrochniak
<wrochniak at gmail.com>


+ Introduction +
++Note++
Note that some technical details may differ at your system, for example your GNU Readline library might be configured different or your locales might be other (``en_US`` is used in examples, although author personally uses ``pl_PL``). But behaviour of Aptsh shouldn't differ too much.

++Old Apt...++
If you read this, then you probably know what Apt is. And I hope you like it; if not, you will after reading this text. :)

So you're an Apt user. Your daily work doesn't require launching ``apt-get`` or ``apt-cache`` too often. But from time to time it does, and then in consumes much time... well, maybe not as much as it would take without Apt, but you know that it could be done faster. When you need to install some piece of software, you search for it with ``apt-cache``, copy package's name and paste it after ``apt-get install``. That's not good - it's better to use bash-completion. But it still may be not enough; if so, try Aptsh. Of course, Aptsh is not just bash-completion rewritten in a mixture of C and C++. Beside tab-completion it can speed up your work in many other ways - just read further. 

++Pseudo-shell?++
Aptsh is a pseudo shell. It means that usage of Aptsh is similar to a normal shell, though results differ. :) While you use Bash for everything, Aptsh is used only for managing software installed on your system. In Aptsh there are available commands like ``install``, ``remove`` or ``dist-upgrade`` - you know them from Apt.

+ Usage +
++Basics++
If you want to see all commands available in Aptsh, they are in ``man aptsh``, or just ``help`` if you are in Apt (a clue: pressing ``Tab`` twice in Aptsh doesn't list them all, I'll explain it later - just try to press Tab after typing 'queue' to see why). As you see, most of them are those old Apt commands, although they are typed without 'apt-get' and 'apt-cache' before. And that's it - just typing Apt commands directly after prompt.
Some examples:

```
vrok@ankh ~ $ sudo aptsh
Reading commands history...
Generating and mapping caches...

aptsh> remove xterm
Reading package lists... Done
Building dependency tree... Done
The following packages will be REMOVED:
  xterm
0 upgraded, 0 newly installed, 1 to remove and 32 not upgraded.
Need to get 0B of archives.
After unpacking 1188kB disk space will be freed.
Do you want to continue [Y/n]? n
Abort.
Generating and mapping caches...

aptsh> install xterm
Reading package lists... Done
Building dependency tree... Done
xterm is already the newest version.
0 upgraded, 0 newly installed, 0 to remove and 32 not upgraded.
Generating and mapping caches...

aptsh> show package_that_doesnt_exist
W: Unable to locate package package_that_doesnt_exist
E: No packages found

aptsh> quit
vrok@ankh ~ $
```

In example above you see how to launch Aptsh (with root privileges - that's the ``sudo`` thing), then you see effects of four Aptsh commands: ``remove``, ``install``, ``show`` and ``quit``.

++TAB completion++
Without Tab completion, Aptsh would be like a car without the engine - you actually can use in the Flinstone way, but it's simpler just to walk.

If you use the Unix shell, you probably know what the headline of this paragraph means (Yes, there are shells without Tab completion, but nowadays it's just as basic as a cup of coffee in the morning). Tab completion in Aptsh works in the same way, except it usually lists matching packages, not files.

+++Commands completion+++
But let's get down to the business... First sort of completion is used for Aptsh commands. You may expect that there actually is nothing special to say, but it's no so simple. There are groups of commands serving to similar tasks, like ``help`` and ``help-howto``. First one displays typical Unix manual page for Aptsh, second one displays this document.

See this:
```
aptsh> (TAB pressed twice)
add              dump             policy           source
autoclean        dump-cfg         queue            stats
build-dep        dumpavail        quit             unmet
check            help             rdepends         update
clean            install          remove           upgrade
depends          listfiles        rls              whatis
dist-upgrade     ls               search           whichpkg
dotty            madison          show
dpkg             orphans          showpkg
dselect-upgrade  pkgnames         showsrc

aptsh>
```

There's nothing about ``help-howto``, just ``help``. As you already know, these two funtions compose a group. Grouping of commands serves to save space on your terminal by displaying only the master command. Of course, completion works for all commands, not only these basic; you just have to type the whole master command. Just see this:
```
aptsh> help (TAB pressed twice)
help  help-howto
aptsh> help
```

It works! :) You can check other groups, like ``queue`` or ``orphans``.

+++Packages completion+++
Second type of completion is used for packages. This one is very simple, it's in the old Bash style. Of course, when you want to install some packages, Aptsh will prompt you all available packages; and only installed when removing. As usual, some examples.

```
aptsh> install (TAB pressed twice)
Display all 20571 possibilities? (y or n)

aptsh> remove (TAB pressed twice)
Display all 1038 possibilities? (y or n)

aptsh> install kde (TAB pressed twice)
Display all 164 possibilities? (y or n)

aptsh> install xterm (TAB pressed twice)
xterm         xtermcontrol  xterminal     xtermset

aptsh> install xterm
```

